enum RolesJuegoEscondidas{
    case contando
    case buscando_jugadores
    
    case buscando_escondite
    case distrayendo
    case escondido
    case regresando_a_base
    
    case encontrado
    case cantar_victoria
    case suspendido /// Es el caso en que el juego vuelve a su estado original de inicio.
}

protocol JugadorDeEscondidas: class{
    var rol: RolesJuegoEscondidas { get set }
    var compañeros_de_juego: [JugadorDeEscondidas] { get set }
    var nombre: String { get set }
    var lugar_actual: UbicacionFisica? { get set }
    var visibilidad: Double { get set }
    func actualizar() -> Bool
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool
}

extension JugadorDeEscondidas { /// Al parecer un protocol se instancia como un struct y no puede mutar el tipo de dato a menos que tenga modificado que aplciara a un tipo en especifico
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool {
        switch(self.rol){
            case .suspendido: 
                self.rol = rol_nuevo
                return true
            case .cantar_victoria, .encontrado: 
                if rol_nuevo == .suspendido {
                    self.rol = rol_nuevo
                    return true
                }
                return false
 
            default: 
                return false
        }
    }
}
struct Ubicacion2Dimensiones{
    var x: Int
    var y: Int 
    init(_ x: Int, _ y: Int){
        self.x = x
        self.y = y
    }
}
class UbicacionFisica{
    var nombre: String
    var lugares_cercanos: [UbicacionFisica]
    //init(_ nombre: String, lugares_cercanos: [UbicacionFisica]){
    init(_ nombre: String){
        self.nombre = nombre
        self.lugares_cercanos = []
    }
    func agregar_lugar(_ lugar: UbicacionFisica) -> Bool{
        for ubicacion in lugares_cercanos{
            if ubicacion.nombre == lugar.nombre{
                return false
            }
        }
        lugar.lugares_cercanos.append(self)
        self.lugares_cercanos.append(lugar)
        return true
    }
}
class Personaje {
    var nombre: String
    var ubicacion: UbicacionFisica?
    init(_ nombre: String){
        self.nombre = nombre
        self.ubicacion = nil
    }
    func establecer_ubicacion(_ nueva_ubicacion: UbicacionFisica) -> Bool{
        if ubicacion == nil{
            self.ubicacion = nueva_ubicacion
            return true
        }
        if ubicacion!.nombre == nueva_ubicacion.nombre{
            return false
        }
        ubicacion = nueva_ubicacion
        return true
    }
}
class PersonajeJugable: Personaje, JugadorDeEscondidas{
    var visibilidad: Double
    var rol: RolesJuegoEscondidas = .suspendido
    var lugar_actual: UbicacionFisica?
    var numero_contado: Int
    var compañeros_de_juego: [JugadorDeEscondidas] = []
    init(_ nombre: String, visibilidad: Double){
        self.visibilidad = visibilidad
        numero_contado = 0
        super.init(nombre)
        lugar_actual = nil
    }
    func actualizar() -> Bool{
        switch(rol){
            case .contando:
                self.contar_para_buscar()
            case .buscando_jugadores:
                self.identificar_jugadores()
                self.moverse_de_lugar()
            case .buscando_escondite:
                self.moverse_de_lugar()
                let quedarse_quieto = Int.random(in: 0...10)
                if quedarse_quieto % 5 == 0{
                    self.rol = .escondido
                }
            case .escondido:
                self.intentar_distraer()
            case .distrayendo:
                self.distraer_buscador()
                let tiempo_distrayendo = Int.random(in: 1...3)
                if tiempo_distrayendo == 1 {
                    self.rol = .buscando_escondite
                    print("\(nombre) deja de distraer al buscador y ahora busca escondite")
                }
            case .suspendido:
                print("Yo \(nombre) he perdido")
            default:
                print("")
        }
        return false
    }
    func verificar_victoria(jugadores: [PersonajeJugable]) -> Bool {
        var jugadoresEscondidos = 0
        var jugadoresSuspendidos = 0
        var jugadorQueBusca: PersonajeJugable?
    for jugador in jugadores {
        switch jugador.rol {
        case .escondido, .distrayendo:
            jugadoresEscondidos += 1
        case .suspendido:
            jugadoresSuspendidos += 1
        case .buscando_jugadores:
            jugadorQueBusca = jugador
        default:
            break
        }
    }
        if let buscador = jugadorQueBusca, jugadoresSuspendidos == jugadores.count - 1 {
        buscador.rol = .cantar_victoria
        print("¡\(buscador.nombre) gana por encontrar a todos!")
            return true
        }
        return false
    }
    func verificar_victoria_por_tiempo(jugadores: [PersonajeJugable]) {
        for jugador in jugadores {
            if jugador.rol == .escondido || jugador.rol == .distrayendo {
                jugador.rol = .cantar_victoria
                print("¡\(jugador.nombre) canta victoria! Nunca fue encontrado...")
            }
        }
    }
 
    
    func identificar_jugadores(){
        for compañero in compañeros_de_juego{
            if compañero.lugar_actual!.nombre == self.lugar_actual!.nombre{
                let probabildiad_de_encontrar = Int(compañero.visibilidad * 100)
                let suerte = Int.random(in: 0...100)
                if suerte <= probabildiad_de_encontrar{
                    compañero.rol = .suspendido
                }
            }
        }
    }
    func moverse_de_lugar(){
    var indice_de_nuevo_lugar = Int.random(
        in: 0..<lugar_actual!.lugares_cercanos.count
    )
    var nuevo_lugar = lugar_actual!.lugares_cercanos[indice_de_nuevo_lugar]
    let deberia_de_cambiar = Int.random(in: 0...10)
    
    if deberia_de_cambiar % 2 == 0 {
        cambiar_de_lugar_a(nuevo_lugar)
        }
    }
    func intentar_distraer() {
    let deberia_distraer = Int.random(in: 0...100) < 20
    
    if deberia_distraer {
        self.rol = .distrayendo
        print("¡\(nombre) decide distraer al buscador!")
        }
    }
    func contar_para_buscar(){
        numero_contado += 1
        print("Soy \(nombre) y voy en el \(numero_contado)")
        if numero_contado > 10{
            self.rol = .buscando_jugadores
        }
    }
    func cambiar_de_lugar_a(_ ubicacion: UbicacionFisica) -> Bool{
        if self.lugar_actual == nil {
            self.lugar_actual = ubicacion
            return true 
        } 
        // if let ubi = lugar actual {}
        //if ubicacion != nil && ubicacion.nombre == lugar_actual.nombre{
        if ubicacion.nombre == self.lugar_actual!.nombre{
            return false
        }
        lugar_actual = ubicacion
        return true
    }
    func distraer_buscador() {
    let visibilidad_temporal = visibilidad * 2
    print("¡\(nombre) está distrayendo! Visibilidad: \(visibilidad_temporal)")
    
        for compañero in compañeros_de_juego {
        if compañero.rol == .buscando_jugadores {
            let atrae_buscador = Int.random(in: 0...1) == 1
            if atrae_buscador {
                print("¡\(compañero.nombre) se está acercando por la distracción!")
            }
            break
        }
    }
}
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool{
        if compañero_nuevo.nombre == self.nombre{
            return false
        }
        for compañero in compañeros_de_juego{
            if compañero.nombre == compañero_nuevo.nombre{
                return false
            }
        }
        compañeros_de_juego.append(compañero_nuevo)
        return true
    }
}
func iniciar_juego(jugadores: [JugadorDeEscondidas]) {
    let numero_del_jugador_que_busca = Int.random(in: 0..<jugadores.count)
    var jugador_que_busca: JugadorDeEscondidas = jugadores[numero_del_jugador_que_busca]
    jugador_que_busca.establecer_rol(.contando)
    for jugador in jugadores {
        jugador_que_busca.agregar_compañero(jugador)
        if jugador.rol == .suspendido{
            jugador.establecer_rol(.buscando_escondite)
        }
    }
    // print("el numero del jugador es \(jugador_que_busca)")
}
let punto_de_inicio = Ubicacion2Dimensiones(1, 3)
var jugadores: [PersonajeJugable] = []
jugadores.append(PersonajeJugable("Pepito Bananas", visibilidad: 0.5))
jugadores.append(PersonajeJugable("Wally", visibilidad: 0.1))
jugadores.append(PersonajeJugable("Chuchito", visibilidad: 0.3))
jugadores.append(PersonajeJugable("Anabelle", visibilidad: 0.9))
jugadores.append(PersonajeJugable("John Cena", visibilidad: 0.1))
jugadores.append(PersonajeJugable("Un elefante", visibilidad: 1))
let loby = UbicacionFisica("Loby")
let oficina = UbicacionFisica("Oficina")
let sala_de_estar = UbicacionFisica("Sala de estar")
let segundo_piso = UbicacionFisica("Segundo piso")
let salon = UbicacionFisica("Salon")
let escaleras = UbicacionFisica("Escaleras")
let baños = UbicacionFisica("Baños")
let azotea = UbicacionFisica("Azotea")
// Loby --- sala_de_estar
loby.agregar_lugar(sala_de_estar)
// sala_de_estar --- Baño
sala_de_estar.agregar_lugar(baños)
// Loby --- Salon
loby.agregar_lugar(salon)
// Loby --- escaleras
loby.agregar_lugar(escaleras)
// escaleras --- segundo_piso
escaleras.agregar_lugar(segundo_piso)
// segundo_piso --- oficina
segundo_piso.agregar_lugar(oficina)
// escaleras --- azotea
escaleras.agregar_lugar(azotea)
// Salon --- Baño
salon.agregar_lugar(baños)

var ubicaciones_juego: [UbicacionFisica] = []
ubicaciones_juego.append(loby)

iniciar_juego(jugadores: jugadores)
for jugador in jugadores{
    jugador.cambiar_de_lugar_a(loby)
}

/// Aqui tenemos la parte de auto juego
var ciclo_actual = 0
// Aqui va mi juego
while true {
    for jugador in jugadores{
        jugador.actualizar()
    }
 
    if jugadores[0].verificar_victoria(jugadores: jugadores) {
        break
    }
    for jugador in jugadores{
        print("El rol de \(jugador.nombre) es \(jugador.rol)")
        print("Estoy en: \(jugador.lugar_actual?.nombre ?? "No se")")
    }
    print("")
    ciclo_actual += 1 
    if ciclo_actual > 25{
        jugadores[0].verificar_victoria_por_tiempo(jugadores: jugadores)
        break
    }
}